/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;


public class MiLista implements MiniList {

	private Container lista = null;
	private Object obj = null;

	@Override
	public boolean add(Object elemento) throws NullPointerException {
		


		return true;
	}

	@Override
	public boolean contains(Object elemento) {

		boolean retorno = false;

		if (elemento != null) {

			retorno = true;

		}
		return retorno;
	}

	@Override
	public boolean delete(Object elemento) {
		boolean retorno = false;
		Container actual = lista;

		while (actual != null) {
			if (actual.obj.equals(elemento)) {
				actual.obj = null;
			}
			actual = actual.next;
		}
		return retorno;
	}

	@Override
	public boolean delete(int elemento) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean set(Object elemento, int posicion) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object get(int posicion) {

		return null;
	}

	@Override
	public int size() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}

	private class Container {
		Object obj = null;
		Container next = null;
		
		MiniList lista = new MiLista();  

	}
	
//	Container lista;
//	Container aux = lista;
//	
//	for(int i = 0; i < pos -1; i++) { 
//		aux = aux.next;
//	}
//		aux.next = aux.next.next; para eliminar el segundo
//	}
	
	//lista = lista.next para elminar el primero

}




//if (elemento == null) {
//	throw new NullPointerException("no se pueden nulos.");
//
//}
//Container <T> nuevo = new Container<>();
//nuevo.elemento = elemento;
//
//if(lista == null) {
//	lista = nuevo;
//}else {
//	Container <T> ultimo = lista;
//	
//	while(ultimo.next!=null)
//		ultimo = ultimo.next;
//	
//	ultimo.next=nuevo;
//}
//numElementos++;
//return true;








//
//
//T elemento = null;
//
//if(lista !=null && posicion >=0 && posicion<numElementos) {
//	Container <T> aux=lista;
//	
//	int contador = 0;
